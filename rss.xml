<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Phillip LeBlanc]]></title><description><![CDATA[Pursuit of knowledge.]]></description><link>https://leblanc.tech</link><generator>GatsbyJS</generator><lastBuildDate>Fri, 20 Mar 2020 06:12:11 GMT</lastBuildDate><item><title><![CDATA[Why are there so many coffee shops in Korea?]]></title><description><![CDATA[Why are there so many coffee shops in Korea?]]></description><link>https://leblanc.tech/why-are-there-so-many-coffee-shops-in-korea</link><guid isPermaLink="false">https://leblanc.tech/why-are-there-so-many-coffee-shops-in-korea</guid><pubDate>Fri, 20 Mar 2020 06:00:00 GMT</pubDate><content:encoded>&lt;p&gt;If you‚Äôve never been to Korea before, something that may surprise you is the sheer number of coffee shops everywhere you look. At first I thought that Korean people really like coffee (I mean, who doesn‚Äôt right?), and while that is true that isn‚Äôt the whole story.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Most Koreans live with their parents until marriage.&lt;/strong&gt; Why? A tempting argument to make would be that this is simply a cultural tradition that has kept its strength from a group of people that have traditional, conservative family values. While these cultural factors are important, in practice they are often overstated. The biggest hurdle to living alone in Korea is money. Unlike the US, which often requires just a month of rent as deposit, the amount of money needed for a deposit on a Korean apartment is much larger. The first apartment I rented in Seoul required a deposit of around $10,000 - which was the lowest deposit I could find at the time. Most young Koreans working part-time jobs with low wages won‚Äôt be able to come up with the kind of money they need to live by themselves. (The reasons for why this system exists are too complex to get into here, look out for another article in the future on this topic.)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;House parties don‚Äôt exist in Korea.&lt;/strong&gt; I‚Äôve never once been asked to go to a party at the house of a Korean. Or even just to hang out. From what I‚Äôve gathered, there are two major factors that contribute to this. The first is a cultural reason - most Koreans consider their home to be a very private place that only their families have access to. The second is a more practical reason. The average size of a single person apartment is around 300 square feet. That is just way too small of a space to live and also entertain guests.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Enter coffee shops.&lt;/strong&gt; Beyond places to get your favorite latte, coffee shops are essentially de-facto hangout spots. Walk into any coffee shop in Korea and you will see couples with their arms wrapped around each other, groups of friends talking about the latest gossip, people buried in their studies, etc. A coffee shop‚Äôs biggest draw is the space that it offers people to chill and gossip, and sometimes work. And in Seoul, there are a lot of people living in very densely populated residential areas. Those people all need places to hang out, and thus a lot of coffee shops have sprung up to fill the void.&lt;/p&gt;
&lt;p&gt;In central Seoul there are three different Starbucks that are less than a two-minute walk from the building I work in. Not to mention the two other coffee shops inside of the building, as well as two in the next building. The sheer number of coffee shops around means there is intense competition for customers. The best coffee shops usually compete on providing the best atmosphere with creative decorations, having a bakery, or whatever else they think will draw people in.&lt;/p&gt;
&lt;p&gt;Take for example this cafe near the popular Hongdae district of Seoul that bring customers in by drawing them into another dimension through a 2D optical illusion.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/cartoon_cafe.jpg&quot;&gt;&lt;/p&gt;
&lt;p&gt;Or how about this coffee shop that is shaped like a Rolleiflex Camera.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/camera_cafe.jpg&quot;&gt;&lt;/p&gt;
&lt;p&gt;Or if magic is more your style, then you might want to grab a butterbeer at this Harry Potter-themed cafe - also located in the Hongdae area.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/harrypotter_cafe.jpg&quot;&gt;&lt;/p&gt;
&lt;p&gt;So there you have it! If you ever find yourself passing through Korea, make sure to stop into a cafe and grab a latte. There should be plenty of options to choose from.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[The Best of Eric Brechner‚Äôs ‚ÄúHard Code‚Äù]]></title><description><![CDATA[Advice on how to become a better engineering manager.]]></description><link>https://leblanc.tech/the-best-of-hard-code</link><guid isPermaLink="false">https://leblanc.tech/the-best-of-hard-code</guid><pubDate>Sat, 14 Mar 2020 02:00:00 GMT</pubDate><content:encoded>&lt;h2&gt;‚ÄúHow can I be a better engineering manager?‚Äù&lt;/h2&gt;
&lt;p&gt;I‚Äôve asked some variant of this question to myself ever since I assumed the role around a year ago in April 2019. As an IC (Individual Contributor), I had a very intuitive understanding of what my role was and what I needed to do. Once I transitioned to management, however, it was murkier. I couldn‚Äôt even accurately describe what my role was. What was I supposed to do now? Fortunately, Microsoft has an excellent manager training program that answers a lot of these questions, plus a two-day intensive ‚Äúmanager bootcamp‚Äù that I flew to headquarters for.&lt;/p&gt;
&lt;p&gt;But when it comes to advice and expertise on being a great software engineering manager, you can‚Äôt get much better than Eric Brechner. His articles and information on software engineering and management are a goldmine, and I‚Äôll help you get started with the best of the best. But who is he, and why should we believe what he says?&lt;/p&gt;
&lt;h2&gt;Who is Eric Brechner?&lt;/h2&gt;
&lt;p&gt;Eric is the development manager for the Xbox Engineering Services team. Before his current assignment, Eric managed development for the Xbox.com web sites, was director of engineering learning and development for Microsoft Corporation, and managed development for a shared feature team in Microsoft Office. Eric has been working for Microsoft since 1995. (More info &lt;a href=&quot;https://imwrightshardcode.com/about-the-author/&quot;&gt;here&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;Pretty impressive, but what is more impressive is how consistently Eric has been in sharing his advice and learning with others. In 2001, he started an opinion column titled ‚Äú&lt;a href=&quot;https://imwrightshardcode.com/&quot;&gt;Hard Code&lt;/a&gt;‚Äù under the pseudonym I.M. Wright with the tagline ‚ÄúBrutally honest, no pulled punches.‚Äù His writing is consistently read by thousands of Microsoft engineers and managers each month (to this day!). He is nearing 200 completed columns, with many of them made into a &lt;a href=&quot;https://imwrightshardcode.com/book/&quot;&gt;book&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;He wrote many of the articles for an internal Microsoft audience, so some of the columns contain terminology that may not make sense to people who have never worked at the company. Still, the vast majority of his advice can be applied to anyone working as a software engineer or engineering manager. Because there are so many articles, it can be difficult to know where to start. But I have summarized the best ones here along with my commentary on what makes them great.&lt;/p&gt;
&lt;h2&gt;The Best of ‚ÄúHard Code‚Äù&lt;/h2&gt;
&lt;h3&gt;üìï &lt;a href=&quot;https://imwrightshardcode.com/2020/03/the-good-stuff/&quot;&gt;The good stuff&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Published in March 2020, this post is hands down the best intro to Eric‚Äôs work. In this post, Eric talks about the best practices of modern high performing software engineering teams and why teams that follow these industry best practices are twice as likely to succeed as those that don‚Äôt. &lt;/p&gt;
&lt;p&gt;For each best practice he mentions (such as organizing small feature teams using DevOps and lean practices that result in continuous delivery), he provides several links to his previous articles that go more in-depth about those specific topics. If you want a single introduction to ‚ÄúHard Code‚Äù - with plenty of links to explore more, you won‚Äôt find a better one than this.&lt;/p&gt;
&lt;h3&gt;üìó &lt;a href=&quot;https://imwrightshardcode.com/2005/12/i-can-manage/&quot;&gt;I can manage&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;First published back in 2005, this article still stands the test of time as the best piece of advice to new managers.
In it he argues that a good manager only needs to do two things: &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Make sure her employees can work and &lt;/li&gt;
&lt;li&gt;Care about her employees. &lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Of course, a great manager can and will do more, but avoiding being a bad manager is as simple as those two tasks (which are not hard). Eric goes further in advice for new managers in a follow-up column called ‚Äú&lt;a href=&quot;https://imwrightshardcode.com/2016/09/never-been-manager/&quot;&gt;never been manager&lt;/a&gt;.‚Äù Other useful posts on being a good manager are &lt;a href=&quot;https://imwrightshardcode.com/2017/11/management-malady/&quot;&gt;management malady&lt;/a&gt; and &lt;a href=&quot;https://imwrightshardcode.com/2004/11/the-toughest-job-poor-performers/&quot;&gt;the toughest job poor performers&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;üìò &lt;a href=&quot;https://imwrightshardcode.com/2013/10/vision-quest/&quot;&gt;The importance of having a vision&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;In this article, Eric talks about how having a compelling vision can drive progress in unimaginable ways while having an ambiguous or unambitious vision will encourage stagnation. When Microsoft fulfilled its original vision of ‚ÄúA computer on every desk and in every home,‚Äù it stumbled primarily due to having a lack of vision. A leader‚Äôs job is to define a compelling vision and get people excited to push towards that vision.&lt;/p&gt;
&lt;h3&gt;üìô &lt;a href=&quot;https://imwrightshardcode.com/2004/06/the-day-we-met/&quot;&gt;The day we met&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Excellent article on how most meetings are a colossal waste of time, which meetings are useful, and how to respect people‚Äôs time. Most people still run terrible meetings‚Äîthey don‚Äôt share a focused agenda in advance, they invite too many people, they schedule too much time, and they don‚Äôt share an actionable recap with everyone impacted. Eric writes more about that in a follow-up article called &lt;a href=&quot;https://imwrightshardcode.com/2017/02/is-never-good-for-you/&quot;&gt;‚ÄúIs never good for you?‚Äù&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;üìï &lt;a href=&quot;https://imwrightshardcode.com/2011/04/you-have-to-make-a-decision/&quot;&gt;You have to make a decision&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;‚ÄúWhat‚Äôs worse‚Äîa flawed decision or no decision? That‚Äôs easy. Decisions keep a business moving. An imperfect decision might move your business slightly in the wrong direction, but at least it will be moving. Make a few adjustments, and you‚Äôre back on track.‚Äù
A common problem I face as an engineering manager is having to make hard decisions without knowing everything I‚Äôd like to know. The advice in this article is to absorb all the relevant information that you can and then trust your intuition. This correlates well with a piece of career advice that I received from one of my previous managers, that the higher up you go in a company, the more you are paid for your decision-making abilities and not your technical skills. Leaders that can show consistent good decision-making ability will naturally ascend to positions with higher responsibility.&lt;/p&gt;
&lt;h3&gt;üìó &lt;a href=&quot;https://imwrightshardcode.com/2009/04/your-world-easier/&quot;&gt;Your World. Easier&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Simple advice on how to achieve better results in a system: single-piece flow and checklists. Single-piece flow is perhaps the most underrated concept in software engineering. By choosing to focus on fewer things at once and driving those items to completion before moving on, you end up shipping a lot more a lot faster than if you hadn‚Äôt.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[The Efficiency Trap]]></title><description><![CDATA[Conventional wisdom holds that to achieve your goals and obtain more success, you need to be more productive.]]></description><link>https://leblanc.tech/the-efficiency-trap</link><guid isPermaLink="false">https://leblanc.tech/the-efficiency-trap</guid><pubDate>Wed, 04 Mar 2020 13:00:00 GMT</pubDate><content:encoded>&lt;p&gt;&lt;img src=&quot;/trap.jpg&quot;&gt;&lt;/p&gt;
&lt;p&gt;Conventional wisdom holds that to achieve your goals and obtain more success, you need to be more productive. Whether it is to get that next promotion or bonus, we work harder and Google the best tips on how to work more efficiently. There is an avalanche of information you can find online about how to work more efficiently, including such tips as:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Keep track of your time&lt;/li&gt;
&lt;li&gt;Take breaks&lt;/li&gt;
&lt;li&gt;Limit distractions&lt;/li&gt;
&lt;li&gt;Finish what you start, etc&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Excitedly, you begin to implement some or all of the tips you find online. After a week or two, you feel like you&apos;ve never been more efficient. You keep this up for several weeks and months. And yet, while you are completing tasks faster than ever before, you don&apos;t seem to be any closer to your real goals or moving the needle in your business or project in a meaningful way. Why is that?&lt;/p&gt;
&lt;p&gt;You&apos;ve fallen into the efficiency trap.&lt;/p&gt;
&lt;p&gt;Working more efficiently can get more things on your todo list done in a faster time, but what does it matter if the items on your list aren&apos;t impactful?&lt;/p&gt;
&lt;h2&gt;Impact&lt;/h2&gt;
&lt;p&gt;My definition of impact is a set of actions you have taken, which led to results. An impactful action is, therefore, one that you have made, which has led to the real results you are seeking. It can be hard to distinguish which actions are impactful versus those that aren&apos;t, but a simple test is to view the absence. If you had not performed that action, would the results have still happened? If the answer is yes, then the action was not impactful.
Therefore increasing impact is the focus. That has a direct correlation to the results we are hoping to achieve.
If I take 100 actions, and only one of those actions leads to results, it doesn&apos;t matter how fast I complete the other 99. I can be the most efficient person in the world at completing those other 99 tasks, but it won&apos;t matter one bit to my impact.&lt;/p&gt;
&lt;h2&gt;Working Effectively&lt;/h2&gt;
&lt;p&gt;A better goal than working more efficiently is to work more effectively. Being effective means getting the results with the least amount of actions. An effective person may not be the fastest or more efficient at completing the tasks they set out to do, but they make sure the jobs they work on have an impact.
Consider the following diagram:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/effective.jpg&quot;&gt;&lt;/p&gt;
&lt;p&gt;If my goal is to get from A to B in the above example, the most effective way is to do the actions that get me on the straight line to B. It doesn&apos;t matter how efficient I am on the ineffective path, it won&apos;t have as much impact as the straight line will.
A lot of people fall into the trap of optimizing working more efficiently along the ineffective path. Or worse, they put in more and more hours thinking that will solve their problem.&lt;/p&gt;
&lt;p&gt;The solution here seems quite simple, don&apos;t work on the actions that don&apos;t lead to results, right?&lt;/p&gt;
&lt;h2&gt;Focus on what matters&lt;/h2&gt;
&lt;p&gt;The problem is that most of the time, you can&apos;t know for sure which actions will lead to the results you want.&lt;/p&gt;
&lt;p&gt;Sometimes you do know right away. There are certain actions that you need to do, which don&apos;t have any impact. Types of actions are a tax and you should work to minimize the time investment they require or eliminate them. Some examples of these would be filing expense reports, waiting for your computer to update, most meetings, etc. Do not work on these tasks during the time you usually are the most productive. A good rule of thumb is to batch these tasks to do at a specific time each week, whenever you normally find it hard to concentrate on other work.&lt;/p&gt;
&lt;p&gt;And now I will give some examples on how to distinguish whether a task will lead to impact. My experience is in software engineering, but you can think about the actions in your life/career and apply similar questions.&lt;/p&gt;
&lt;h3&gt;What problem am I trying to solve?&lt;/h3&gt;
&lt;p&gt;This question has saved me countless hours of working on pointless tasks. Whenever I am about to spend a significant part of my day working on some task, I will ask myself this question. I see a lot of junior engineers spend way too much time trying to solve problems that don&apos;t matter. It&apos;s great that they found a solution to an edge case that is unlikely to happen, but we need to make the main functionality work first!&lt;/p&gt;
&lt;h3&gt;Solve the problem you have today&lt;/h3&gt;
&lt;p&gt;I find a lot of software engineers have this tendency to build software architectures that can handle every possible scenario. This often leads to overly complex code with lots of abstractions and lots of bugs. It is very hard to reason about changes to that codebase. When asked why they are making it so complex, they will answer that this is the best way to ensure the system will handle the requirements and scale of the future. But why would we spend valuable time now trying to improve our product to scale to millions of customers, when we don&apos;t even have a single customer today? Solve the problem that you are facing today, leave tomorrow&apos;s problems for tomorrow.&lt;/p&gt;
&lt;p&gt;There is a caveat to this point though. While solving today‚Äôs problems will make the product managers and the business people happy, this should be balanced with tackling the engineering debt in the system. Focus too much on solving today‚Äôs problems and you will spend a lot of your future time reacting to engineering problems that could have been avoided.&lt;/p&gt;
&lt;h3&gt;Add value to the people who will ultimately benefit&lt;/h3&gt;
&lt;p&gt;If you are having trouble figuring out what matters, another way to look at it is how you can add value to the people who will eventually benefit from your effort?
As a software engineer, adding value to your end-users is what matters. This can be in the form of new features, increased reliability, increased performance, fixed bugs etc. If you can‚Äôt tie the work you are doing to some improvement to the end-user experience, you should question the value of that action.&lt;/p&gt;
&lt;h3&gt;Embrace simplicity&lt;/h3&gt;
&lt;p&gt;Simplicity is a topic that deserves a dedicated post, but I&apos;ll touch briefly on the basics here. The more complex a software system, the harder it is to understand how a specific code change will lead to a result. The most complex systems often become nearly impossible to make changes to, due to the risk of a regression. Simpler systems are easier to make changes to, which means you can deliver value to your customers faster and more reliably on a consistent basis.&lt;/p&gt;
&lt;p&gt;Simplicity is also necessary on the customer experience side. Oftentimes, engineers justify adding complexity by saying their customers need &quot;flexibility.&quot; They think their customers need the thousands of options that their systems provide to tweak it exactly to their liking. Then when something goes wrong, it often becomes impossible to diagnose what is going on because no one else has that same set of options configured. The pre-iPhone smartphone era is a perfect example of this. Smartphone makers thought that customers wanted lots of options on how to customize their experience when all they wanted was a simple experience that Just Worked.&lt;/p&gt;
&lt;h2&gt;Escaping the trap&lt;/h2&gt;
&lt;p&gt;Now that you&apos;ve seen the efficiency trap for what it is, you can start taking steps to escape from it (or avoid it altogether). Having more impact is the goal, and working more effectively by focusing on what matters is the way to get to the outcomes you want. So remember the next time you sit down to do some work, what problem are you trying to solve?&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Why Did You Choose to Move to Korea?]]></title><description><![CDATA[The definitive answer to why I chose to live in Korea.]]></description><link>https://leblanc.tech/why-korea</link><guid isPermaLink="false">https://leblanc.tech/why-korea</guid><pubDate>Tue, 25 Feb 2020 13:00:00 GMT</pubDate><content:encoded>&lt;p&gt;Whenever I tell people that I am living in Seoul, South Korea, the very next question they have is, ‚Äúbut why?‚Äù I usually tell people a straightforward answer like, ‚ÄúI was fascinated by the culture/language‚Äù or ‚ÄúI had an opportunity, and I figured I would take it.‚Äù &lt;/p&gt;
&lt;p&gt;The real answer is, of course, a lot more complicated and nuanced, but I don‚Äôt always have the required 20 minutes it would take to answer that question.&lt;/p&gt;
&lt;p&gt;The truth is - there wasn‚Äôt a single motivation for it, it was the perfect storm of opportunity + experiences in my life that made me pull the trigger. But to truly understand this, I need to start with some background.&lt;/p&gt;
&lt;p&gt;I was born and raised in Baton Rouge, Louisiana, and went to my local university - Louisiana State University. I did not have the typical college life that is often stereotyped. I stayed at home and commuted to my classes every day. When I wasn‚Äôt in class, I went to my part-time research job at the LSU Center for Computation and Technology. I only had a couple of friends that I would hang out with outside of class, and I spent a lot of my free time playing video games or writing software. One of the video games I played a lot was Starcraft 2 - which was hugely popular in Korea at that time. I even joined a local campus club dedicated to people playing Starcraft 2.&lt;/p&gt;
&lt;p&gt;If you aren‚Äôt familiar with the Starcraft franchise, it is a strategy game where two people compete against each other to mine resources to build an army and defeat the other player. In Korea, especially, the game amassed enormous popularity with lots of players and viewers. So much so that TV broadcasters would televise big Starcraft matches on national TV. In all of the significant Starcraft tournaments around the world, the Korean players would consistently destroy all other competition. The birth of the worldwide esports phenomena owes its existence to Korea and Starcraft, and I was immersed in this subculture early on.&lt;/p&gt;
&lt;p&gt;In May 2012, I graduated from LSU with a degree in Computer Science and a job offer for Microsoft as a software engineer. One of the first things I did when I started at Microsoft was to join the Starcraft 2 club there. I made a lot of great friends from that club early on, but I lost interest in Starcraft after the first year or so.&lt;/p&gt;
&lt;p&gt;When I first moved to work for Microsoft, I lived near the campus headquarters in Redmond, WA. I was close enough to be able to bike to work, but the downside was the area I was living in had nothing going on during the weekend. After a year, I moved to Seattle and got a roommate who was one of my classmates from LSU that also started at Microsoft. As luck would have it, the next-door neighbor in our Seattle apartment ended up becoming my best friend. He was an Australian guy also working for Microsoft. Over the next four years, we became close and went on lots of crazy adventures with our group of friends. But it wasn‚Äôt to last, after a few years he wanted to move back to Australia to be with his long-distance girlfriend. &lt;/p&gt;
&lt;p&gt;We decided to go on a 3-month long trip around the world, as one last hurrah before he moved away. He had been to many European countries, but neither of us had been to any parts of Asia. So after some back and forth on which countries to visit, we had an itinerary! One of the places we were going to visit was, of course, Seoul, Korea. &lt;/p&gt;
&lt;p&gt;Before we embarked, I found myself at a party with friends from the Microsoft Starcraft 2 club. While there, I mentioned my plans to visit Korea. Two guys wanted to tag along for the Korean week of our trip, so we invited them along!&lt;/p&gt;
&lt;p&gt;In February of 2016, we embarked on the trip that would change the course of my life. Looking back on this trip, I think the most fun we had was in Korea. All four of us were Starcraft 2 nerds, and we went to watch a couple of live Starcraft 2 competitions! We also did a lot of other exciting activities in Korea, and I fantasized a bit about how neat it would be to live here. I knew Microsoft had an office in Korea, but I wasn‚Äôt sure if they had any software engineering positions. I also became fascinated with the Korean alphabet system. One of the tourist attractions in Seoul teaches you the basics of the alphabet, and I was entranced by it. A long time ago, most Koreans couldn‚Äôt read or write because the standard alphabet used to be based on the Chinese system. One of the kings wanted to create an alphabet that commoners could quickly learn, and he single-handedly created the alphabet that is still in use today. The Korean alphabet, Hangul, is one of the simplest alphabets in the world, and you can learn it in an afternoon.&lt;/p&gt;
&lt;p&gt;After the trip, I started learning the Korean language (which, unlike the alphabet, is not so easy to learn) and joined a local Seattle Meetup group for people interested in Korea. I found a Korean willing to tutor me, and I started watching more Korean dramas and listening to Korean pop music. At this time, I was looking more aggressively into opportunities that would allow me to move to Korea, but nothing came up. My friend, who worked for Google, suggested that I apply to the Korea office since they were hiring. That ended up not working out, but after that, I became more convinced I wanted to work in Korea. I put a search alert on the internal Microsoft careers site to email me about any positions that opened up for software engineering in Korea. I honestly didn‚Äôt expect anything to come up from that, but it was at least worth trying. A couple of months later, the manager of a software engineering team in Microsoft Korea messaged me. I was already planning a vacation to Korea for a couple of weeks after his first message, so we met while I was visiting. He offered me the job on the spot, and a couple of months later, I was living in Seoul!&lt;/p&gt;
&lt;p&gt;Of course, moving and adjusting to life here wasn‚Äôt quite that simple, and my family wasn‚Äôt entirely on-board with it at first, but that is a story for another time. If you‚Äôre interested in hearing more about my adventures in Korea, let me know by subscribing to my newsletter!&lt;/p&gt;</content:encoded></item></channel></rss>